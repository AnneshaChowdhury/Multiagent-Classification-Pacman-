{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.10240}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9 Python 2.7.10 (default, May 23 2015, 09:40:32) [MSC v.1500 32 bit (Intel)] on win32\par
Type "copyright", "credits" or "license()" for more information.\par
>>> ================================ RESTART ================================\par
>>> \par
Starting on 10-11 at 23:10:44\par
\par
Question q1\par
===========\par
\par
Pacman emerges victorious! Score: 1193\par
Pacman emerges victorious! Score: 1108\par
Pacman emerges victorious! Score: 1153\par
Pacman emerges victorious! Score: 1211\par
Pacman emerges victorious! Score: 1143\par
Pacman emerges victorious! Score: 946\par
Pacman emerges victorious! Score: 1168\par
Pacman emerges victorious! Score: 1064\par
Pacman emerges victorious! Score: 1126\par
Pacman emerges victorious! Score: 1057\par
Average Score: 1116.9\par
Scores:        1193.0, 1108.0, 1153.0, 1211.0, 1143.0, 946.0, 1168.0, 1064.0, 1126.0, 1057.0\par
Win Rate:      10/10 (1.00)\par
Record:        Win, Win, Win, Win, Win, Win, Win, Win, Win, Win\par
*** PASS: test_cases\\q1\\grade-agent.test (4 of 4 points)\par
***     1116.9 average score (2 of 2 points)\par
***         Grading scheme:\par
***          < 500:  0 points\par
***         >= 500:  1 points\par
***         >= 1000:  2 points\par
***     10 games not timed out (0 of 0 points)\par
***         Grading scheme:\par
***          < 10:  fail\par
***         >= 10:  0 points\par
***     10 wins (2 of 2 points)\par
***         Grading scheme:\par
***          < 1:  fail\par
***         >= 1:  0 points\par
***         >= 5:  1 points\par
***         >= 10:  2 points\par
\par
### Question q1: 4/4 ###\par
\par
\par
Question q2\par
===========\par
\par
*** PASS: test_cases\\q2\\0-lecture-6-tree.test\par
*** PASS: test_cases\\q2\\0-small-tree.test\par
*** PASS: test_cases\\q2\\1-1-minmax.test\par
*** PASS: test_cases\\q2\\1-2-minmax.test\par
*** PASS: test_cases\\q2\\1-3-minmax.test\par
*** PASS: test_cases\\q2\\1-4-minmax.test\par
*** PASS: test_cases\\q2\\1-5-minmax.test\par
*** PASS: test_cases\\q2\\1-6-minmax.test\par
*** PASS: test_cases\\q2\\1-7-minmax.test\par
*** PASS: test_cases\\q2\\1-8-minmax.test\par
*** PASS: test_cases\\q2\\2-1a-vary-depth.test\par
*** PASS: test_cases\\q2\\2-1b-vary-depth.test\par
*** PASS: test_cases\\q2\\2-2a-vary-depth.test\par
*** PASS: test_cases\\q2\\2-2b-vary-depth.test\par
*** PASS: test_cases\\q2\\2-3a-vary-depth.test\par
*** PASS: test_cases\\q2\\2-3b-vary-depth.test\par
*** PASS: test_cases\\q2\\2-4a-vary-depth.test\par
*** PASS: test_cases\\q2\\2-4b-vary-depth.test\par
*** PASS: test_cases\\q2\\2-one-ghost-3level.test\par
*** PASS: test_cases\\q2\\3-one-ghost-4level.test\par
*** PASS: test_cases\\q2\\4-two-ghosts-3level.test\par
*** PASS: test_cases\\q2\\5-two-ghosts-4level.test\par
*** PASS: test_cases\\q2\\6-tied-root.test\par
*** PASS: test_cases\\q2\\7-1a-check-depth-one-ghost.test\par
*** PASS: test_cases\\q2\\7-1b-check-depth-one-ghost.test\par
*** PASS: test_cases\\q2\\7-1c-check-depth-one-ghost.test\par
*** PASS: test_cases\\q2\\7-2a-check-depth-two-ghosts.test\par
*** PASS: test_cases\\q2\\7-2b-check-depth-two-ghosts.test\par
*** PASS: test_cases\\q2\\7-2c-check-depth-two-ghosts.test\par
*** Running MinimaxAgent on smallClassic 1 time(s).\par
Pacman died! Score: 84\par
Average Score: 84.0\par
Scores:        84.0\par
Win Rate:      0/1 (0.00)\par
Record:        Loss\par
*** Finished running MinimaxAgent on smallClassic after 2 seconds.\par
*** Won 0 out of 1 games. Average score: 84.000000 ***\par
*** PASS: test_cases\\q2\\8-pacman-game.test\par
\par
### Question q2: 5/5 ###\par
\par
\par
Question q3\par
===========\par
\par
*** FAIL: Exception raised: maxFunction() takes exactly 5 arguments (3 given)\par
*** \par
*** Traceback (most recent call last):\par
***   File "C:\\Python27\\multiagent (2)\\multiagent\\grading.py", line 75, in grade\par
***     util.TimeoutFunction(getattr(gradingModule, q),300)(self) # Call the question's function\par
***   File "C:\\Python27\\multiagent (2)\\multiagent\\util.py", line 618, in __call__\par
***     result = self.function(*args, **keyArgs)\par
***   File "C:\\Python27\\multiagent (2)\\multiagent\\autograder.py", line 295, in <lambda>\par
***     return lambda grades: question.execute(grades)\par
***   File "C:\\Python27\\multiagent (2)\\multiagent\\testClasses.py", line 57, in execute\par
***     if not f(grades):\par
***   File "C:\\Python27\\multiagent (2)\\multiagent\\autograder.py", line 290, in <lambda>\par
***     return lambda grades: testCase.execute(grades, moduleDict, solutionDict)\par
***   File "multiagentTestClasses.py", line 397, in execute\par
***     action, generated = self.solveProblem(multiAgents)\par
***   File "multiagentTestClasses.py", line 384, in solveProblem\par
***     action = studentAgent.getAction(self.problem.startState)\par
***   File "multiAgents.py", line 195, in getAction\par
***     bestScore,bestMove=self.maxFunction(gameState,self.depth,alpha, beta)\par
***   File "multiAgents.py", line 207, in maxFunction\par
***     scores = [self.minFunction(gameState.generateSuccessor(self.index,action),1, depth, alpha, beta) for action in actions]\par
***   File "multiAgents.py", line 223, in minFunction\par
***     scores =[self.maxFunction(gameState.generateSuccessor(agent,action),(depth-1))[0] for action in actions]\par
*** TypeError: maxFunction() takes exactly 5 arguments (3 given)\par
*** \par
\par
### Question q3: 0/5 ###\par
\par
\par
Question q4\par
===========\par
\par
*** PASS: test_cases\\q4\\0-expectimax1.test\par
*** PASS: test_cases\\q4\\1-expectimax2.test\par
*** PASS: test_cases\\q4\\2-one-ghost-3level.test\par
*** PASS: test_cases\\q4\\3-one-ghost-4level.test\par
*** PASS: test_cases\\q4\\4-two-ghosts-3level.test\par
*** PASS: test_cases\\q4\\5-two-ghosts-4level.test\par
*** PASS: test_cases\\q4\\6-1a-check-depth-one-ghost.test\par
*** PASS: test_cases\\q4\\6-1b-check-depth-one-ghost.test\par
*** PASS: test_cases\\q4\\6-1c-check-depth-one-ghost.test\par
*** PASS: test_cases\\q4\\6-2a-check-depth-two-ghosts.test\par
*** PASS: test_cases\\q4\\6-2b-check-depth-two-ghosts.test\par
*** PASS: test_cases\\q4\\6-2c-check-depth-two-ghosts.test\par
*** Running ExpectimaxAgent on smallClassic 1 time(s).\par
Pacman died! Score: 84\par
Average Score: 84.0\par
Scores:        84.0\par
Win Rate:      0/1 (0.00)\par
Record:        Loss\par
*** Finished running ExpectimaxAgent on smallClassic after 2 seconds.\par
*** Won 0 out of 1 games. Average score: 84.000000 ***\par
*** PASS: test_cases\\q4\\7-pacman-game.test\par
\par
### Question q4: 5/5 ###\par
\par
\par
Question q5\par
===========\par
\par
*** FAIL: Exception raised: better not found as a method or class\par
*** \par
*** Traceback (most recent call last):\par
***   File "C:\\Python27\\multiagent (2)\\multiagent\\grading.py", line 75, in grade\par
***     util.TimeoutFunction(getattr(gradingModule, q),300)(self) # Call the question's function\par
***   File "C:\\Python27\\multiagent (2)\\multiagent\\util.py", line 618, in __call__\par
***     result = self.function(*args, **keyArgs)\par
***   File "C:\\Python27\\multiagent (2)\\multiagent\\autograder.py", line 295, in <lambda>\par
***     return lambda grades: question.execute(grades)\par
***   File "C:\\Python27\\multiagent (2)\\multiagent\\testClasses.py", line 110, in execute\par
***     if not f(grades):\par
***   File "C:\\Python27\\multiagent (2)\\multiagent\\autograder.py", line 290, in <lambda>\par
***     return lambda grades: testCase.execute(grades, moduleDict, solutionDict)\par
***   File "multiagentTestClasses.py", line 458, in execute\par
***     agent = agentType(**agentOpts)\par
***   File "multiAgents.py", line 125, in __init__\par
***     self.evaluationFunction = util.lookup(evalFn, globals())\par
***   File "C:\\Python27\\multiagent (2)\\multiagent\\util.py", line 571, in lookup\par
***     raise Exception, '%s not found as a method or class' % name\par
*** Exception: better not found as a method or class\par
*** \par
\par
### Question q5: 0/6 ###\par
\par
\par
Finished at 23:10:59\par
\par
Provisional grades\par
==================\par
Question q1: 4/4\par
Question q2: 5/5\par
Question q3: 0/5\par
Question q4: 5/5\par
Question q5: 0/6\par
------------------\par
Total: 14/25\par
\par
Your grades are NOT yet registered.  To register your grades, make sure\par
to follow your instructor's guidelines to receive credit on your project.\par
\par
>>> \par
}
 